@model cgpay.wallet.application.Models.GatewayDetailModel

@{
    ViewBag.Title = "GatewayDetail";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}


@{
    ViewBag.Title = "Manage Gateway";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}
@{var BreadCum = cgpay.wallet.application.Library.ApplicationUtilities.GenerateBreadcum("/Admin/Gateway/Detail", "Manage Gateway", ControllerDisplayName: "Gateway");}

@section BreadCum{
    <style>
        .pull-right {
            float: right;
            margin-left: auto;
        }
    </style>
    @Html.Raw(BreadCum)
}
<div class="card">
    <div class="card-header header-elements-inline">
        <legend class="card-title text-uppercase font-size-sm font-weight-bold">Gateway Detail</legend>
    </div>
    <div class="card-body">
        @{
            string check = null;
            if (Model.GatewayStatus == "Y")
            {
                check = "checked";
            }
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.GatewayId)
            @Html.HiddenFor(model => model.GatewayStatus)
            <fieldset>
                <div class="mb-3">
                    <div class="row">
                        @Html.NLabelFor(model => model.GatewayName, new { @class = "form-control", autocomplete = "off" }, 3)
                        @*@Html.NLabelFor(model => model.GatewayUsername, new { @class = "form-control", autocomplete = "off", @type = "password" }, 3)*@
                        @*@Html.NLabelFor(model => model.GatewayPwd, new { @class = "form-control", autocomplete = "off", @type = "password" }, 3)*@
                        @*@Html.NLabelFor(model => model.GatewayURL, new { @class = "form-control", autocomplete = "off" }, 3)*@
                        @*  @Html.NTextBoxFor(model => model.GatewayType, new { @class = "form-control", autocomplete = "off" }, 3)*@
                        @Html.NLabelFor(model => model.GatewayType, new { @class = "form-control", autocomplete = "off" }, 3)


                        @*@Html.NTextBoxFor(model => model.IsDirectGateway, new { @class = "form-control", autocomplete = "off" }, 6)*@
                        @*@Html.NDropDownListFor(model => model.IsDirectGateway, Model.IsDirectGatewayList, new { @class = "form-control", autocomplete = "off" }, 6)*@

                        @*<div class="col-lg-4 ">
                                <br />
                                <div class="form-group mb-3 mb-md-2 " style="padding-top:10px">
                                    @Html.Label("Direct Gateway", new { @class = " font-weight-semibold" }) &nbsp;&nbsp;
                                    <label class="form-check-label">
                                        @Html.CheckBoxFor(model => model.IsDirectGateway, new { @name = "IsDirectGateway", @disabled = "disabled", @class = "form-check-input-styled" })
                                    </label>
                                </div>

                            </div>*@
                    </div>

                    @*   @Html.NSwitchBoxFor(model => model.GatewayStatus, Model.GatewayStatus == "Y" ? true : false, "Y", 6)*@


                </div>
                @*<div class="row">
                    @Html.NLabelFor(model => model.GatewayAccessCode, new { @class = "form-control", autocomplete = "off", @type = "password" }, 3)
                    @Html.NLabelFor(model => model.GatewaySecurityCode, new { @class = "form-control", autocomplete = "off", @type = "password" }, 3)
                    @Html.NLabelFor(model => model.GatewayApitoken, new { @class = "form-control", autocomplete = "off", @type = "password" }, 3)
                </div>*@
                <div class="row">
                    @Html.NLabelFor(model => model.GatewayCountry, new { @class = "form-control", autocomplete = "off" }, 3)
                    @*  @Html.NDropDownListFor(model => model.GatewayCurrency, Model.GatewayCurrencyList, new { @class = "form-control", autocomplete = "off" }, 3)*@

                    @*@Html.NTextBoxFor(model => model.GatewayCountry, new { @class = "form-control", autocomplete = "off" }, 3)*@
                    @Html.NLabelFor(model => model.GatewayCurrency, new { @class = "form-control", autocomplete = "off" }, 3)

                    @Html.NLabelFor(model => model.GatewayBalance, new { @class = "form-control", autocomplete = "off", @readonly = "readonly" }, 3)

                </div>
                @*<div class="row">
                    <div class="col-lg-12" style="padding-bottom: 10px">
                        @Html.LabelFor(model => model.GatewayStatus, "Gateway status", new { @class = "label", autocomplete = "off" })
                        <br />
                        <div class="form-check form-check-switchery form-check-switchery-double">
                            <label class="form-check-label">
                                Disable
                                <input type="checkbox" class="form-input-switchery" data-fouc data-switchery="true" @Html.Raw(check) disabled="disabled" style="display: none;" id="checkbox" />
                                Enable
                            </label>
                        </div>
                    </div>
                </div>*@

                <div class="row mt-1 ml-0">
                    <button type="button" class="btn btn-light btn-sm bg-primary" onclick="window.history.back();">Back</button>
                </div>


            </fieldset>
        }

    </div>
</div>
<script>

    $('#checkbox').change(function (e) {

        if ($('#checkbox').is(":checked")) {
            $('#GatewayStatus').val('Y');

        } else {

            $('#GatewayStatus').val('N');
        }
    });
</script>
