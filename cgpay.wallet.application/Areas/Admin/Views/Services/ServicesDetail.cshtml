@model cgpay.wallet.application.Models.ServicesModel

@{
    ViewBag.Title = "ServicesDetail";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

@{var BreadCum = cgpay.wallet.application.Library.ApplicationUtilities.GenerateBreadcum("/Admin/Services/Index", "Services Detail",ControllerDisplayName:"Services");}
@section BreadCum{
    <style>
        .pull-right {
            float: right;
            margin-left: auto;
        }
    </style>
    @Html.Raw(BreadCum)
}

<div class="card">
    <div class="card-header header-elements-inline">
        <legend class="card-title text-uppercase font-size-sm font-weight-bold">Services Detail</legend>
    </div>
    <div class="card-body">
            @Html.AntiForgeryToken()
            @Html.HiddenFor(Model => Model.ProductId)
            @Html.HiddenFor(Model => Model.ProductLogo)
            <fieldset class="mb-3">
                <div class="row">
                    <div class="col-md-8" style="padding-left:0;">
                        @*    @Html.NTextBoxFor(model => model.TransactionType, new { @class = "form-control", autocomplete = "off" }, 3)*@
                        @Html.NLabelFor(model => model.TransactionType, new { @class = "form-control", autocomplete = "off" }, 2)
                         @Html.NLabelFor(model => model.Company, new { @class = "form-control", autocomplete = "off" }, 3)
                        @Html.NLabelFor(model => model.Status, new { @class = "form-control", autocomplete = "off" }, 2)
                        @Html.NLabelFor(model => model.ProductLabel, new { @class = "form-control", autocomplete = "off" }, 2)

                    </div>
                    <div class="col-md-4">
                        <div><img id="service_logo" height="300" width="300" style="border:solid" /></div>
                        @*<div> <input type="file" title="search logo" id="file" name="file" onchange="show(this)" /> </div>*@
                    </div>
                </div>

                <div class="row">

                    @*     @Html.NTextBoxFor(model => model.ProductType, new { @class = "form-control", autocomplete = "off" }, 3)*@
                    @Html.NLabelFor(model => model.ProductType, new { @class = "form-control", autocomplete = "off" }, 3)

                    @Html.NLabelFor(model => model.ProductCategory, new { @class = "form-control", autocomplete = "off" }, 3)
                </div>
                <div class="row">
                    @Html.NLabelFor(model => model.MinDenominationAmount, new { @class = "form-control", autocomplete = "off" }, 3)

                    @Html.NLabelFor(model => model.MaxDenomonationAmount, new { @class = "form-control", autocomplete = "off" }, 3)
                    <input id="Denomonationamounterror" value="Set the Amount Correctly" style="border:hidden;color:red">

                </div>
                <div class="row">
                    @* @Html.NTextBoxFor(model => model.PrimaryGateway, new { @class = "form-control", autocomplete = "off" }, 3)*@
                    @Html.NLabelFor(model => model.PrimaryGateway, new { @class = "form-control", autocomplete = "off" }, 3)

                    @*@Html.NTextBoxFor(model => model.SecondaryGateway, new { @class = "form-control", autocomplete = "off" }, 3)*@
                    @Html.NLabelFor(model => model.SecondaryGateway, new { @class = "form-control", autocomplete = "off" }, 3)


                    @*@Html.NTextBoxFor(model => model.ProductLogo, new { @class = "form-control", autocomplete = "off" }, 3)*@
                </div>
                <div class="row">
                    @*@Html.LabelFor(model => model.ProductServiceInfo, htmlAttributes: new { @class = "control-label col-md-2" })*@

                    @Html.NLabelFor(model => model.ProductServiceInfo, new { @class = "form-control", autocomplete = "off", @rows = "4" }, 3)


                </div>
                @*<div class="row">
                            @Html.TextAreaFor(model => model.ProductServiceInfo, new { @row = "4", @cols = "4", @class = "form-control" })

                            @Html.ValidationMessageFor(model => model.ProductServiceInfo, "",new {@class="text-danger"})
                        </div>

                    </div>*@
                <br />
                <div class="row mt-1 ml-1">
                    <button type="button" class="btn btn-light btn-sm bg-primary" onclick="window.history.back();">Back</button>
                </div>
            </fieldset>
    </div>

</div>
<script>
    $(document).ready(function () {


        $("#Denomonationamounterror").attr('type', 'hidden');
        if ($("#ProductId").val() != "") {

            //$("#TransactionType option:not(:selected)").prop("disabled", true);
            //$("#Company option:not(:selected)").prop("disabled", true);
            //$("#SecondaryGateway option:not(:selected)").prop("disabled", true);
            //$("#PrimaryGateway option:not(:selected)").prop("disabled", true);

            $("#TransactionType").addClass("disabled");
            $("#Status").addClass("disabled");
            $("#Company").addClass("disabled");

            //$("#Company").prop("disabled", true);
            //$("#SecondaryGateway").prop("disabled", true);
            //$("#PrimaryGateway").prop("disabled", true);
            document.getElementById("service_logo").src = "/Content/assets/images/service logos/" + $("#ProductLogo").val();
        }
        $("#MinDenominationAmount").on("keypress keyup blur", function (event) {
            //this.value = this.value.replace(/[^0-9\.]/g,'');
            $(this).val($(this).val().replace(/[^0-9\.]/g, ''));
            if ((event.which != 46 || $(this).val().indexOf('.') != -1) && (event.which < 48 || event.which > 57)) {
                event.preventDefault();
            }
        });

        $("#MaxDenomonationAmount").on("keypress keyup blur", function (event) {
            //this.value = this.value.replace(/[^0-9\.]/g,'');
            $(this).val($(this).val().replace(/[^0-9\.]/g, ''));
            if ((event.which != 46 || $(this).val().indexOf('.') != -1) && (event.which < 48 || event.which > 57)) {
                event.preventDefault();
            }
        });
        $("#MaxDenomonationAmount").blur(function () {

            compare();
        });


    });

    function compare() {
        if ($("#MinDenominationAmount").val() != "" && $("#MaxDenominationAmount").val() != "") {
            if ($("#MinDenominationAmount").val() > $("#MaxDenomonationAmount").val()) {
                $("#Denomonationamounterror").prop('type', 'text');
                $("#MaxDenomonationAmount").focus();
            }
            else
                $("#Denomonationamounterror").attr('type', 'hidden');



            //

        }
    }
    function show(input) {
        if (input.files && input.files[0]) {
            var filerdr = new FileReader();
            filerdr.onload = function (e) {
                $('#service_logo').attr('src', e.target.result);
            }
            filerdr.readAsDataURL(input.files[0]);
        }
    }


</script>
